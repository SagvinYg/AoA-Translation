package net.tslat.aoa3.client.render.entities.layers;

import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.entity.RenderLiving;
import net.minecraft.client.renderer.entity.layers.LayerRenderer;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.util.ResourceLocation;

public class RenderLayerInvulnerabilityAura implements LayerRenderer<EntityLivingBase> {
	private final ResourceLocation auraTexture;
	private final RenderLiving entityRenderer;

	public RenderLayerInvulnerabilityAura(RenderLiving entityRenderer, ResourceLocation armourTexture) {
		this.entityRenderer = entityRenderer;
		this.auraTexture = armourTexture;
	}

	@Override
	public void doRenderLayer(EntityLivingBase entity, float limbSwing, float limbSwingAmount, float partialTicks, float ageInTicks, float netHeadYaw, float headPitch, float scale) {
		if (entity.getIsInvulnerable()) {
			boolean invisible = entity.isInvisible();

			GlStateManager.depthMask(!invisible);
			this.entityRenderer.bindTexture(auraTexture);
			GlStateManager.matrixMode(5890);
			GlStateManager.loadIdentity();

			float f = (float)entity.ticksExisted + partialTicks;

			GlStateManager.translate(f * 0.01F, f * 0.01F, 0.0F);
			GlStateManager.matrixMode(5888);
			GlStateManager.enableBlend();
			GlStateManager.color(0.5F, 0.5F, 0.5F, 1.0F);
			GlStateManager.disableLighting();
			GlStateManager.blendFunc(GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
			this.entityRenderer.getMainModel().setModelAttributes(this.entityRenderer.getMainModel());
			Minecraft.getMinecraft().entityRenderer.setupFogColor(true);
			this.entityRenderer.getMainModel().render(entity, limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale);
			Minecraft.getMinecraft().entityRenderer.setupFogColor(false);
			GlStateManager.matrixMode(5890);
			GlStateManager.loadIdentity();
			GlStateManager.matrixMode(5888);
			GlStateManager.enableLighting();
			GlStateManager.disableBlend();
			GlStateManager.depthMask(invisible);
		}
	}

	@Override
	public boolean shouldCombineTextures() {
		return false;
	}
}
