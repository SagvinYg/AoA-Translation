package net.tslat.aoa3.structure.celeve;

import net.minecraft.block.state.IBlockState;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.World;
import net.tslat.aoa3.common.registration.BlockRegister;
import net.tslat.aoa3.structure.AoAStructure;

import java.util.Random;

public class GreenCelevusTree extends AoAStructure { //StructureSize: 5x15x5
	private static final IBlockState whiteCelevus = BlockRegister.leavesCelevusWhite.getDefaultState();
	private static final IBlockState greenCelevus = BlockRegister.leavesCelevusGreen.getDefaultState();
	private static final IBlockState celevusStem = BlockRegister.celeveStem.getDefaultState();

	public GreenCelevusTree() {
		super("GreenCelevusTree");
	}

	@Override
	protected void build(World world, Random rand, BlockPos basePos) {
		addBlock(world, basePos, 2, 0, 2, celevusStem);
		addBlock(world, basePos, 2, 1, 2, celevusStem);
		addBlock(world, basePos, 2, 2, 2, celevusStem);
		addBlock(world, basePos, 2, 3, 2, celevusStem);
		addBlock(world, basePos, 1, 4, 1, greenCelevus);
		addBlock(world, basePos, 1, 4, 2, greenCelevus);
		addBlock(world, basePos, 1, 4, 3, greenCelevus);
		addBlock(world, basePos, 2, 4, 1, greenCelevus);
		addBlock(world, basePos, 2, 4, 2, celevusStem);
		addBlock(world, basePos, 2, 4, 3, greenCelevus);
		addBlock(world, basePos, 3, 4, 1, greenCelevus);
		addBlock(world, basePos, 3, 4, 2, greenCelevus);
		addBlock(world, basePos, 3, 4, 3, greenCelevus);
		addBlock(world, basePos, 2, 5, 2, celevusStem);
		addBlock(world, basePos, 2, 6, 2, celevusStem);
		addBlock(world, basePos, 1, 7, 1, greenCelevus);
		addBlock(world, basePos, 1, 7, 2, greenCelevus);
		addBlock(world, basePos, 1, 7, 3, greenCelevus);
		addBlock(world, basePos, 2, 7, 1, greenCelevus);
		addBlock(world, basePos, 2, 7, 2, celevusStem);
		addBlock(world, basePos, 2, 7, 3, greenCelevus);
		addBlock(world, basePos, 3, 7, 1, greenCelevus);
		addBlock(world, basePos, 3, 7, 2, greenCelevus);
		addBlock(world, basePos, 3, 7, 3, greenCelevus);
		addBlock(world, basePos, 2, 8, 2, celevusStem);
		addBlock(world, basePos, 1, 9, 1, whiteCelevus);
		addBlock(world, basePos, 1, 9, 2, whiteCelevus);
		addBlock(world, basePos, 1, 9, 3, whiteCelevus);
		addBlock(world, basePos, 2, 9, 1, whiteCelevus);
		addBlock(world, basePos, 2, 9, 2, whiteCelevus);
		addBlock(world, basePos, 2, 9, 3, whiteCelevus);
		addBlock(world, basePos, 3, 9, 1, whiteCelevus);
		addBlock(world, basePos, 3, 9, 2, whiteCelevus);
		addBlock(world, basePos, 3, 9, 3, whiteCelevus);
		addBlock(world, basePos, 0, 10, 0, greenCelevus);
		addBlock(world, basePos, 0, 10, 1, greenCelevus);
		addBlock(world, basePos, 0, 10, 2, greenCelevus);
		addBlock(world, basePos, 0, 10, 3, greenCelevus);
		addBlock(world, basePos, 0, 10, 4, greenCelevus);
		addBlock(world, basePos, 1, 10, 0, greenCelevus);
		addBlock(world, basePos, 1, 10, 1, greenCelevus);
		addBlock(world, basePos, 1, 10, 2, greenCelevus);
		addBlock(world, basePos, 1, 10, 3, greenCelevus);
		addBlock(world, basePos, 1, 10, 4, greenCelevus);
		addBlock(world, basePos, 2, 10, 0, greenCelevus);
		addBlock(world, basePos, 2, 10, 1, greenCelevus);
		addBlock(world, basePos, 2, 10, 2, greenCelevus);
		addBlock(world, basePos, 2, 10, 3, greenCelevus);
		addBlock(world, basePos, 2, 10, 4, greenCelevus);
		addBlock(world, basePos, 3, 10, 0, greenCelevus);
		addBlock(world, basePos, 3, 10, 1, greenCelevus);
		addBlock(world, basePos, 3, 10, 2, greenCelevus);
		addBlock(world, basePos, 3, 10, 3, greenCelevus);
		addBlock(world, basePos, 3, 10, 4, greenCelevus);
		addBlock(world, basePos, 4, 10, 0, greenCelevus);
		addBlock(world, basePos, 4, 10, 1, greenCelevus);
		addBlock(world, basePos, 4, 10, 2, greenCelevus);
		addBlock(world, basePos, 4, 10, 3, greenCelevus);
		addBlock(world, basePos, 4, 10, 4, greenCelevus);
		addBlock(world, basePos, 0, 11, 0, whiteCelevus);
		addBlock(world, basePos, 0, 11, 1, whiteCelevus);
		addBlock(world, basePos, 0, 11, 2, whiteCelevus);
		addBlock(world, basePos, 0, 11, 3, whiteCelevus);
		addBlock(world, basePos, 0, 11, 4, whiteCelevus);
		addBlock(world, basePos, 1, 11, 0, whiteCelevus);
		addBlock(world, basePos, 1, 11, 1, whiteCelevus);
		addBlock(world, basePos, 1, 11, 2, whiteCelevus);
		addBlock(world, basePos, 1, 11, 3, whiteCelevus);
		addBlock(world, basePos, 1, 11, 4, whiteCelevus);
		addBlock(world, basePos, 2, 11, 0, whiteCelevus);
		addBlock(world, basePos, 2, 11, 1, whiteCelevus);
		addBlock(world, basePos, 2, 11, 2, whiteCelevus);
		addBlock(world, basePos, 2, 11, 3, whiteCelevus);
		addBlock(world, basePos, 2, 11, 4, whiteCelevus);
		addBlock(world, basePos, 3, 11, 0, whiteCelevus);
		addBlock(world, basePos, 3, 11, 1, whiteCelevus);
		addBlock(world, basePos, 3, 11, 2, whiteCelevus);
		addBlock(world, basePos, 3, 11, 3, whiteCelevus);
		addBlock(world, basePos, 3, 11, 4, whiteCelevus);
		addBlock(world, basePos, 4, 11, 0, whiteCelevus);
		addBlock(world, basePos, 4, 11, 1, whiteCelevus);
		addBlock(world, basePos, 4, 11, 2, whiteCelevus);
		addBlock(world, basePos, 4, 11, 3, whiteCelevus);
		addBlock(world, basePos, 4, 11, 4, whiteCelevus);
		addBlock(world, basePos, 0, 12, 0, greenCelevus);
		addBlock(world, basePos, 0, 12, 1, greenCelevus);
		addBlock(world, basePos, 0, 12, 2, greenCelevus);
		addBlock(world, basePos, 0, 12, 3, greenCelevus);
		addBlock(world, basePos, 0, 12, 4, greenCelevus);
		addBlock(world, basePos, 1, 12, 0, greenCelevus);
		addBlock(world, basePos, 1, 12, 1, greenCelevus);
		addBlock(world, basePos, 1, 12, 2, greenCelevus);
		addBlock(world, basePos, 1, 12, 3, greenCelevus);
		addBlock(world, basePos, 1, 12, 4, greenCelevus);
		addBlock(world, basePos, 2, 12, 0, greenCelevus);
		addBlock(world, basePos, 2, 12, 1, greenCelevus);
		addBlock(world, basePos, 2, 12, 2, greenCelevus);
		addBlock(world, basePos, 2, 12, 3, greenCelevus);
		addBlock(world, basePos, 2, 12, 4, greenCelevus);
		addBlock(world, basePos, 3, 12, 0, greenCelevus);
		addBlock(world, basePos, 3, 12, 1, greenCelevus);
		addBlock(world, basePos, 3, 12, 2, greenCelevus);
		addBlock(world, basePos, 3, 12, 3, greenCelevus);
		addBlock(world, basePos, 3, 12, 4, greenCelevus);
		addBlock(world, basePos, 4, 12, 0, greenCelevus);
		addBlock(world, basePos, 4, 12, 1, greenCelevus);
		addBlock(world, basePos, 4, 12, 2, greenCelevus);
		addBlock(world, basePos, 4, 12, 3, greenCelevus);
		addBlock(world, basePos, 4, 12, 4, greenCelevus);
		addBlock(world, basePos, 0, 13, 0, whiteCelevus);
		addBlock(world, basePos, 0, 13, 1, whiteCelevus);
		addBlock(world, basePos, 0, 13, 2, whiteCelevus);
		addBlock(world, basePos, 0, 13, 3, whiteCelevus);
		addBlock(world, basePos, 0, 13, 4, whiteCelevus);
		addBlock(world, basePos, 1, 13, 0, whiteCelevus);
		addBlock(world, basePos, 1, 13, 1, whiteCelevus);
		addBlock(world, basePos, 1, 13, 2, whiteCelevus);
		addBlock(world, basePos, 1, 13, 3, whiteCelevus);
		addBlock(world, basePos, 1, 13, 4, whiteCelevus);
		addBlock(world, basePos, 2, 13, 0, whiteCelevus);
		addBlock(world, basePos, 2, 13, 1, whiteCelevus);
		addBlock(world, basePos, 2, 13, 2, whiteCelevus);
		addBlock(world, basePos, 2, 13, 3, whiteCelevus);
		addBlock(world, basePos, 2, 13, 4, whiteCelevus);
		addBlock(world, basePos, 3, 13, 0, whiteCelevus);
		addBlock(world, basePos, 3, 13, 1, whiteCelevus);
		addBlock(world, basePos, 3, 13, 2, whiteCelevus);
		addBlock(world, basePos, 3, 13, 3, whiteCelevus);
		addBlock(world, basePos, 3, 13, 4, whiteCelevus);
		addBlock(world, basePos, 4, 13, 0, whiteCelevus);
		addBlock(world, basePos, 4, 13, 1, whiteCelevus);
		addBlock(world, basePos, 4, 13, 2, whiteCelevus);
		addBlock(world, basePos, 4, 13, 3, whiteCelevus);
		addBlock(world, basePos, 4, 13, 4, whiteCelevus);
		addBlock(world, basePos, 1, 14, 1, greenCelevus);
		addBlock(world, basePos, 1, 14, 2, greenCelevus);
		addBlock(world, basePos, 1, 14, 3, greenCelevus);
		addBlock(world, basePos, 2, 14, 1, greenCelevus);
		addBlock(world, basePos, 2, 14, 2, greenCelevus);
		addBlock(world, basePos, 2, 14, 3, greenCelevus);
		addBlock(world, basePos, 3, 14, 1, greenCelevus);
		addBlock(world, basePos, 3, 14, 2, greenCelevus);
		addBlock(world, basePos, 3, 14, 3, greenCelevus);
	}
}
